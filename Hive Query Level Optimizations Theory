
3 Categories of Optimizations

1. Table structure level optimization: Partitioning and Bucketing
2. query level optimization : Join optimizations
3. simplifying the query expressions : Windowing functions

1.	Try to minimize the number of JOIN columns if possible 
Because if we minimize the join columns then there will be less mapreduce jobs.

•	Internally even a join is executed as a map reduce job.
•	mapper will give the join column as the key and mapper gives all the other columns as the value.
•	Key – The join column
•	Value-  all the remaining columns

table1 (product_id, all the other columns)
table1 (key, values)
table2 (id, all the other columns list2 5)
table2(key, values)
The Join column is the key 
The remaining columns are the values

We have 2 stages for this mapreduce job
•	Map
•	Reduce

Whenever we can write the join in a way that reducer does not have to do anything then we say such join as map side join.
Whenever feasible then we should try to write the join in a way that it is a map side join only.
First condition for map side join is:
•	All tables except one should be small enough to fit in memory.
One table is small and other is big
•	Two tables should be small and one should be big.
•	Except one table all the other tables should be small.

Left Table                                                                                         Right Table
Smaller								                                                                               BIG	
1									                                                                                    1
2									                                                                                    2 		
3										                                                                                  3
4									                                                                                  	4											
.										                                                                                  .	
.										                                                                                  .
100 Rows									                                                                      100000 Rows	

•	SMALL TABLE HAS 100 ROWS
•	BIG TABLE HAS 100000 ROWS – 512 MB

N1 – Block1 of BIG TABLE with 25000 Rows – ALL 100 ROWS OF SMALL TABLE
N2 – Block2 of BIG TABLE with 25000 Rows – ALL 100 ROWS OF SMALL TABLE
N3 – Block3 of BIG TABLE with 25000 Rows – ALL 100 ROWS OF SMALL TABLE
N4 – Block4 of BIG TABLE with 25000 Rows – ALL 100 ROWS OF SMALL TABLE


•	Each node will hold complete small table and parts of big table.
•	Parts of the larger table are distributed to each mapper.
Different Kind of Joins:
1.	INNER JOIN (NATURAL JOIN)
Show only the matching records from both the tables.
2.	LEFT OUTER JOIN
Show all the matching records + show all the non-matching records from the left table with nulls on the right side.
3.	RIGHT OUTER JOIN
Show all the matching records + show all the non-matching records from the right table with nulls on the right side.
4.	FULL OUTER JOIN
UNION of LEFT OUTER + RIGHT OUTER

QUESTION: Can a INNER JOIN be treated as a MAP side join provided the LEFT Table is small enough to fit in memory and the RIGHT TABLE is Large.
ANSWER: When LEFT TABLE is small then INNER JOINS can be treated as MAP SIDE JOINS.

QUESTION: Can a LEFT OUTER JOIN be treated as a MAP side join provided the LEFT Table is small enough to fit in memory and the RIGHT TABLE is Large.
ANSWER: NO When LEFT TABLE is small then LEFT OUTER JOINS cannot be treated as MAP SIDE JOINS.

QUESTION: Can a RIGHT OUTER JOIN be treated as a MAP side join provided the LEFT Table is small enough to fit in memory and the RIGHT TABLE is Large.
ANSWER: YES, When LEFT TABLE is Small

QUESTION: FULL OUTER JOIN
ANSWER: 
LEFT OUTER UNION RIGHT OUTER 
SO FULL OUTER JOIN CANNOT BE TREATED LIKE MAP SIDE JOIN


CONCLUSION: WHEN LEFT TABLE IS SMALL
1.	INNER JOIN CAN BE MAP SIDE JOIN
2.	LEFT OUTER JOIN CANNOT BE MAP SIDE JOIN
3.	RIGHT OUTER JOIN CAN BE MAP SIDE JOIN

